@model VehicleDispatchPlan.Models.V_TraineeCommutingEdt
@using VehicleDispatchPlan.Constants;

@{
    ViewBag.Title = "通学教習生更新";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm("Edit", "TraineeCommuting", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>教習生情報</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @{
        Html.EnableClientValidation(false);
    }
    @Html.HiddenFor(model => model.Trainee.TraineeId)
    @Html.HiddenFor(model => model.Trainee.GroupId)

    <div class="form-group">
        @{
            @* 編集モードによりボタンの表示を設定 *@
            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
            {
                <input type="submit" name="cmd" value="@AppConstant.CMD_CONFIRM" class="btn btn-default" style="margin-left:10px;" />
            }
            else
            {
                <input type="submit" name="cmd" value="@AppConstant.CMD_RETURN" class="btn btn-default" style="margin-left:10px;" />
                <input type="submit" name="cmd" value="@AppConstant.CMD_UPDATE" class="btn btn-default" style="margin-left:10px;" />
            }
        }
    </div>

    @* エラーメッセージ *@
    <div style="color: Red">@ViewBag.ErrorMessage</div>

    <hr />

    @* 教習者名 *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.TraineeName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                @* 編集モードによりreadonlyの有無を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    @Html.EditorFor(model => model.Trainee.TraineeName, new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Trainee.TraineeName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                }
            }
        </div>
    </div>

    @* 性別 *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                @* 編集モードによりreadonlyの有無を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    @Html.DropDownListFor(model => model.Trainee.Gender, new SelectListItem[] {
                        new SelectListItem() { Text = AppConstant.GENDER_MALE, Value=AppConstant.GENDER_MALE },
                        new SelectListItem() { Text = AppConstant.GENDER_FEMALE, Value=AppConstant.GENDER_FEMALE }
                    }, "選択してください", new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Trainee.Gender, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                }
            }
        </div>
    </div>

    @* 教習コース *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.TrainingCourseCd, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                @* 編集モードによりreadonlyの有無を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    @Html.DropDownListFor(model => model.Trainee.TrainingCourseCd, Model.Trainee.SelectTrainingCourse, "選択してください", new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Trainee.TrainingCourse.TrainingCourseName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.HiddenFor(model => model.Trainee.TrainingCourseCd)
                }
            }
        </div>
    </div>

    @* 申込日 *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.ReserveDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div style="display: flex;">
                @{
                    @* 編集モードによりreadonlyの有無を設定 *@
                    if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                    {
                        @Html.EditorFor(model => model.Trainee.ReserveDate, new { htmlAttributes = new { @class = "form-control" } })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.Trainee.ReserveDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    }
                }
            </div>
        </div>
    </div>

    @* 入校予定日 *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.EntrancePlanDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div style="display: flex;">
                @{
                    @* 編集モードによりreadonlyの有無を設定 *@
                    if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                    {
                        @Html.EditorFor(model => model.Trainee.EntrancePlanDate, new { htmlAttributes = new { @class = "form-control" } })
                        <input type="submit" name="cmd" value="@AppConstant.CMD_SET_TMP_GRD" class="btn btn-default" style="margin-left: 10px;" />
                        <div style="margin-left:5px; height:auto; vertical-align:text-bottom;">
                            <span style="position:absolute; bottom:0; font-size:12px;">入卒カレンダーから仮免予定日・卒業予定日を設定します。</span>
                        </div>
                    }
                    else
                    {
                        @Html.EditorFor(model => model.Trainee.EntrancePlanDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    }
                }
            </div>
        </div>
    </div>

    @* 仮免予定日 *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.TmpLicencePlanDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                @* 編集モードによりreadonlyの有無を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    @Html.EditorFor(model => model.Trainee.TmpLicencePlanDate, new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Trainee.TmpLicencePlanDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                }
            }
        </div>
    </div>

    @* 卒業予定日 *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.GraduatePlanDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                @* 編集モードによりreadonlyの有無を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    @Html.EditorFor(model => model.Trainee.GraduatePlanDate, new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Trainee.GraduatePlanDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                }
            }
        </div>
    </div>

    @* 高校名 *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.SchoolName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                @* 編集モードによりreadonlyの有無を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    @Html.EditorFor(model => model.Trainee.SchoolName, new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Trainee.SchoolName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                }
            }
        </div>
    </div>

    @* 中学区 *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.MiddleSchoolDistrict, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                @* 編集モードによりreadonlyの有無を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    @Html.EditorFor(model => model.Trainee.MiddleSchoolDistrict, new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Trainee.MiddleSchoolDistrict, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                }
            }
        </div>
    </div>

    @* 集客形態 *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.FormOfAttractingCustomers, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                @* 編集モードによりreadonlyの有無を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    @Html.EditorFor(model => model.Trainee.FormOfAttractingCustomers, new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Trainee.FormOfAttractingCustomers, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                }
            }
        </div>
    </div>

    @* キャンセルフラグ *@
    <div class="form-group">
        @Html.LabelFor(model => model.Trainee.CancelFlg, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                @* 編集モードによりdisabledの有無を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    @Html.EditorFor(model => model.Trainee.CancelFlg, new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    @Html.HiddenFor(model => model.Trainee.CancelFlg)
                    @Html.EditorFor(model => model.Trainee.CancelFlg, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                }
            }
        </div>
    </div>

    @{
        if (Model.ChartData != null)
        {
            // 表
            @Html.Partial("../Shared/Table", Model.ChartData)
        }
    }

</div>
}

<div>
    @{
        @* 編集モードにより一覧リンクの表示有無を設定 *@
        if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
        {
            @Html.ActionLink("一覧", "List")
        }
    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
