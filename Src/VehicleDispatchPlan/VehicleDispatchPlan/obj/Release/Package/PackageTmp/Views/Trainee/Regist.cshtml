@model VehicleDispatchPlan.Models.V_TraineeReg
@using VehicleDispatchPlan.Constants;
@using VehicleDispatchPlan.Models;

@{
    ViewBag.Title = "登録";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { name = "form1", id = "form1" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>教習生情報</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @{
            Html.EnableClientValidation(false);
        }

        <div class="form-group">
            @{
                @* 編集モードによりボタンの表示を設定 *@
                if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                {
                    <input type="submit" name="cmd" value="確認" class="btn btn-default" style="margin-left:10px;" />
                }
                else
                {
                    <input type="submit" name="cmd" value="戻る" class="btn btn-default" />
                    <input type="submit" name="cmd" value="登録" class="btn btn-default" style="margin-left:10px;" />
                }
            }
        </div>

        @* エラーメッセージ *@
        <div style="color: Red">@Html.Encode(TempData["errorMessage"])</div>

        @* 一覧のsubmitにてインデックスを設定 *@
        <input type="hidden" name="index" value="" />

        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.TraineeList.FirstOrDefault().TraineeName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TraineeList.FirstOrDefault().AttendTypeCd)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TraineeList.FirstOrDefault().TrainingCourseCd)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TraineeList.FirstOrDefault().EntrancePlanDate)
                </th>
                <th></th>
                <th>
                    @Html.DisplayNameFor(model => model.TraineeList.FirstOrDefault().TmpLicencePlanDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TraineeList.FirstOrDefault().GraduatePlanDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TraineeList.FirstOrDefault().LodgingCd)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TraineeList.FirstOrDefault().AgentName)
                </th>
                <th></th>
            </tr>

            @for (int i = 0; i < Model.TraineeList.Count(); i++)
            {
                <tr>
                    <td>
                        @* 教習者名 *@
                        @{
                            @* 編集モードによりreadonlyの有無を設定 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].TraineeName, new { htmlAttributes = new { @class = "form-control", @style = "width: 150px;" } })
                            }
                            else
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].TraineeName, new { htmlAttributes = new { @class = "form-control", @style = "width: 150px;", @readonly = "readonly" } })
                            }
                        }
                    </td>
                    <td>
                        @* 通学種別 *@
                        @{
                            @* 編集モードにより未選択の有無を設定 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                @Html.DropDownListFor(modelitem => Model.TraineeList[i].AttendTypeCd, Model.TraineeList[i].SelectAttendType, "", new { htmlAttributes = new { @class = "form-control" } })
                            }
                            else
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].AttendTypeName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.HiddenFor(modelitem => Model.TraineeList[i].AttendTypeCd)
                            }
                        }
                    </td>
                    <td>
                        @* 教習コース *@
                        @{
                            @* 編集モードにより未選択の有無を設定 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                @Html.DropDownListFor(modelitem => Model.TraineeList[i].TrainingCourseCd, Model.TraineeList[i].SelectTrainingCourse, "", new { htmlAttributes = new { @class = "form-control" } })
                            }
                            else
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].TrainingCourseName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.HiddenFor(modelitem => Model.TraineeList[i].TrainingCourseCd)
                            }
                        }
                    </td>
                    <td>
                        @* 入校予定日 *@
                        @{
                            @* 編集モードによりreadonlyの有無を設定 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].EntrancePlanDate, new { htmlAttributes = new { @class = "form-control" } })
                            }
                            else
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].EntrancePlanDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            }
                        }
                    </td>
                    <td>
                        @* 日付設定 *@
                        @{
                            @* 編集の場合に表示 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                <input type="submit" name="cmd" value="仮免・卒業日設定" class="btn btn-default" onclick="reflect('@i')" style="font-size: 12px" />
                            }
                        }
                    </td>
                    <td>
                        @* 仮免予定日 *@
                        @{
                            @* 編集モードによりreadonlyの有無を設定 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].TmpLicencePlanDate, new { htmlAttributes = new { @class = "form-control" } })
                            }
                            else
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].TmpLicencePlanDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            }
                        }
                    </td>
                    <td>
                        @* 卒業予定日 *@
                        @{
                            @* 編集モードによりreadonlyの有無を設定 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].GraduatePlanDate, new { htmlAttributes = new { @class = "form-control" } })
                            }
                            else
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].GraduatePlanDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            }
                        }
                    </td>
                    <td>
                        @* 宿泊施設 *@
                        @{
                            @* 編集モードにより未選択の有無を設定 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                @Html.DropDownListFor(modelitem => Model.TraineeList[i].LodgingCd, Model.TraineeList[i].SelectLodging, "", new { htmlAttributes = new { @class = "form-control" } })
                            }
                            else
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].LodgingName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.HiddenFor(modelitem => Model.TraineeList[i].LodgingCd)
                            }
                        }
                    </td>
                    <td>
                        @* エージェント *@
                        @{
                            @* 編集モードによりreadonlyの有無を設定 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].AgentName, new { htmlAttributes = new { @class = "form-control", @style = "width: 150px;" } })
                            }
                            else
                            {
                                @Html.EditorFor(modelitem => Model.TraineeList[i].AgentName, new { htmlAttributes = new { @class = "form-control", @style = "width: 150px;", @readonly = "readonly" } })
                            }
                        }
                    </td>
                    <td>
                        @* 追加ボタン *@
                        @{
                            @* 編集の場合に表示 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
                            {
                                <input type="submit" name="cmd" value="追加" class="btn btn-default" onclick="reflect('@i')" style="font-size: 12px" />
                            }
                        }
                    </td>
                    <td>
                        @* 削除ボタン *@
                        @{
                            @* 編集の場合、かつ先頭の行以外の場合に表示 *@
                            if (AppConstant.EditMode.Edit.Equals(Model.EditMode) && i != 0)
                            {
                                <input type="submit" name="cmd" value="削除" class="btn btn-default" onclick="reflect('@i')" style="font-size: 12px" />
                            }
                        }
                    </td>
                </tr>
            }

        </table>

        @{
            if (Model.ChartData != null)
            {
                @* 表 *@
                <div class="row" style="overflow: auto; margin-top: 30px;">
                    <table border="1" style="table-layout: fixed; width: 100%;">
                        <thead>
                            <tr>
                                <th width="150" colspan="3" style="text-align: center;">日付</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <th width="40" style="text-align: center;">@item.Date.ToString("M/d")</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th rowspan="3" style="text-align: center;">受入残</th>
                                <th colspan="2" style="text-align: center;">総数</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.AcceptTotalRemAmt</td>
                                }
                            </tr>
                            <tr>
                                <th colspan="2" style="text-align: center;">合宿</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.AcceptLodgingRemAmt</td>
                                }
                            </tr>
                            <tr>
                                <th colspan="2" style="text-align: center;">通学</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.AcceptCommutingRemAmt</td>
                                }
                            </tr>
                            <tr>
                                <th rowspan="7" style="text-align: center;">在籍</th>
                                <th colspan="2" style="text-align: center;">総数</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.TotalRegAmt</td>
                                }
                            </tr>
                            <tr>
                                <th rowspan="4" style="text-align: center;">合宿</th>
                                <th style="text-align: center;">MT-1</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.LodgingMtFstRegAmt</td>
                                }
                            </tr>
                            <tr>
                                <th style="text-align: center;">MT-2</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.LodgingMtSndRegAmt</td>
                                }
                            </tr>
                            <tr>
                                <th style="text-align: center;">AT-1</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.LodgingAtFstRegAmt</td>
                                }
                            </tr>
                            <tr>
                                <th style="text-align: center;">AT-2</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.LodgingAtSndRegAmt</td>
                                }
                            </tr>
                            <tr>
                                <th rowspan="2" style="text-align: center;">通学</th>
                                <th style="text-align: center;">MT</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.CommutingMtRegAmt</td>
                                }
                            </tr>
                            <tr>
                                <th style="text-align: center;">AT</th>
                                @foreach (V_ChartData item in Model.ChartData)
                                {
                                    <td style="text-align: center;">@item.CommutingAtRegAmt</td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>
            }
        }

    </div>
}

<div>
    @{
        @* 編集モードによりreadonlyの有無を設定 *@
        if (AppConstant.EditMode.Edit.Equals(Model.EditMode))
        {
            @Html.ActionLink("一覧", "List")
        }
    }
</div>

<script type="text/javascript">
    function reflect(index) {
        document.form1.index.value = index;
    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
